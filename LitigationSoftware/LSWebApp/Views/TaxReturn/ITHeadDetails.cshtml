@model LSWebApp.Models.ITHeadDetailsModel
@if (Model.ITHead == "AdvanceTax1installment"
        || Model.ITHead == "TDS"
        || Model.ITHead == "InterestUS234A")
{
    decimal total = 0;
    switch (Model.ITHead)
    {
        case "AdvanceTax1installment":
            total = (Model.ITReturnDetailsObject.AdvanceTax1installment.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax1installment.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.AdvanceTax2installment.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax2installment.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.AdvanceTax3installment.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax3installment.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.AdvanceTax4installment.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax4installment.Value
                        : 0);
            break;
        case "TDS":
            total = (Model.ITReturnDetailsObject.TDS.HasValue
                        ? Model.ITReturnDetailsObject.TDS.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.TDS26AS.HasValue
                        ? Model.ITReturnDetailsObject.TDS26AS.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.TDSasperBooks.HasValue
                        ? Model.ITReturnDetailsObject.TDSasperBooks.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.TCSPaidbyCompany.HasValue
                        ? Model.ITReturnDetailsObject.TCSPaidbyCompany.Value
                        : 0)
                    + (Model.ITReturnDetailsObject.TaxCollectedAtSource.HasValue
                        ? Model.ITReturnDetailsObject.TaxCollectedAtSource.Value
                        : 0);
            break;
        case "InterestUS234A":
            total = (Model.ITReturnDetailsObject.InterestUS234A.HasValue
                        ? Model.ITReturnDetailsObject.InterestUS234A.Value
                        : 0)
                    +
                    (Model.ITReturnDetailsObject.InterestUS234B.HasValue
                        ? Model.ITReturnDetailsObject.InterestUS234B.Value
                        : 0)
                    +
                    (Model.ITReturnDetailsObject.InterestUS234C.HasValue
                        ? Model.ITReturnDetailsObject.InterestUS234C.Value
                        : 0);
            break;
        default:
            break;
    }
    <tr class="expand table-info">
        <td class="expandCollapse" style="font-weight:bold;font-size:large;">+</td>
        <td></td>
        <td style="text-align:Left;font-weight:bold;font-size:large;">
            @switch (Model.ITHead)
            {
                case "AdvanceTax1installment":
                    @Html.Raw("Advance Tax Installment")
                    break;
                case "TDS":
                    @Html.Raw("TDS ")
                    break;
                case "InterestUS234A":
                    @Html.Raw("Interest")
                    break;
                default:
                    break;
            }

        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSalary
                        , string.Format("{0:f}", total)
                        , new { @class = "numericOnly", @disabled = "disabled" })
                </div>
            </div>
        </td>
    </tr>
}
<tr class="@(Model.ITHead == "AdvanceTax4installment"
    || Model.ITHead == "TaxCollectedAtSource"
    || Model.ITHead == "InterestUS234C" ? "collapse" : "")">
    <td>@Model.ITHeadMasterList[Model.ITHead].ExcelSrNo</td>
    <td></td>
    <td>
        <div class="row col-12">
            @Model.ITHeadMasterList[Model.ITHead].Description
            @if (Model.ITReturnDetailsObject.Id > 0
            && Model.ITHeadMasterList[Model.ITHead].IsSpecialIncomeEnabled)
            {
                @Html.Partial("_ITHeadSpecialIncome"
                    , Model.ITHeadSpecialIncomeModels[Model.ITHead])
            }

        </div>
    </td>
    <td>
        <div class="row col-12">
            @switch (Model.ITHead)
            {
                case "IncomefromSalary":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSalary
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromSalary)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "HousePropIncome":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.HousePropIncome
                    , string.Format("{0:f}", Model.ITReturnDetailsObject.HousePropIncome)
                    , new { @class = "numericOnly" })
                    </div>
                    break;
                case "IncomefromCapGainsLTCG":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsLTCG
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromCapGainsLTCG)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "IncomefromCapGainsSTCG":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsSTCG
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromCapGainsSTCG)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "IncomefromBusinessProf":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromBusinessProf
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromBusinessProf)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "IncomefromSpeculativeBusiness":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSpeculativeBusiness
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromSpeculativeBusiness)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "IncomeFromOtherSources":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomeFromOtherSources
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomeFromOtherSources)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "DeductChapterVIA":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.DeductChapterVIA
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.DeductChapterVIA)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "ProfitUS115JB":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.ProfitUS115JB
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.ProfitUS115JB)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "AdvanceTax1installment":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax1installment
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax1installment)
                        , new { @class = "numericOnly"})
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                            data-date="" data-date-format="dd M yyyy"
                            data-link-field="ITReturnDetailsObject_AdvanceTax1installmentDate"
                            data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax1installmentDate
                        , Model.ITReturnDetailsObject.AdvanceTax1installmentDate.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax1installmentDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;
                case "AdvanceTax2installment":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax2installment
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax2installment)
                        , new { @class = "numericOnly" })
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                         data-date="" data-date-format="dd M yyyy"
                         data-link-field="ITReturnDetailsObject_AdvanceTax2installmentDate"
                         data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax2installmentDate
                        , Model.ITReturnDetailsObject.AdvanceTax2installmentDate.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax2installmentDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;
                case "AdvanceTax3installment":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax3installment
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax3installment)
                        , new { @class = "numericOnly" })
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                         data-date="" data-date-format="dd M yyyy"
                         data-link-field="ITReturnDetailsObject_AdvanceTax3installmentDate"
                         data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax3installmentDate
                        , Model.ITReturnDetailsObject.AdvanceTax3installmentDate.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax3installmentDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;
                case "AdvanceTax4installment":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax4installment
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax4installment)
                        , new { @class = "numericOnly" })
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                         data-date="" data-date-format="dd M yyyy"
                         data-link-field="ITReturnDetailsObject_AdvanceTax4installmentDate"
                         data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax4installmentDate
                        , Model.ITReturnDetailsObject.AdvanceTax4installmentDate.HasValue
                        ? Model.ITReturnDetailsObject.AdvanceTax4installmentDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;
                case "TDS":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.TDS)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "TDS26AS":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS26AS
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.TDS26AS)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "TDSasperBooks":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDSasperBooks
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.TDSasperBooks)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "TCSPaidbyCompany":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.TCSPaidbyCompany
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.TCSPaidbyCompany)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "TaxCollectedAtSource":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.TaxCollectedAtSource
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.TaxCollectedAtSource)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "SelfAssessmentTax":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.SelfAssessmentTax
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.SelfAssessmentTax)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "ForeignTaxCredit":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.ForeignTaxCredit
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.ForeignTaxCredit)
                        , new { @class = "numericOnly" })
                    </div>
                break;
                case "MATCredit":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATCredit
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.MATCredit)
                        , new { @class = "numericOnly" })
                    </div>
                break;
                case "InterestUS234A":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234A
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234A)
                        , new { @class = "numericOnly" })
                    </div>
                break;
                case "InterestUS234B":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234B
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234B)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "InterestUS234C":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234C
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234C)    
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "InterestUS234D":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234D
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234D)
                        , new { @class = "numericOnly" })
                    </div>
                    break;
                case "InterestUS220":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS220
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS220)
                        , new { @class = "numericOnly" })
                    </div>
                break;
                case "RefundAdjusted":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.RefundAdjusted
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.RefundAdjusted)
                        , new { @class = "numericOnly" })
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                         data-date="" data-date-format="dd M yyyy"
                         data-link-field="ITReturnDetailsObject_RefundAdjustedDate"
                         data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.RefundAdjustedDate
                        , Model.ITReturnDetailsObject.RefundAdjustedDate.HasValue
                        ? Model.ITReturnDetailsObject.RefundAdjustedDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;
                case "RegularAssessment":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.RegularAssessment
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.RegularAssessment)
                        , new { @class = "numericOnly" })
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                         data-date="" data-date-format="dd M yyyy"
                         data-link-field="ITReturnDetailsObject_RegularAssessmentDate"
                         data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.RegularAssessmentDate
                        , Model.ITReturnDetailsObject.RegularAssessmentDate.HasValue
                        ? Model.ITReturnDetailsObject.RegularAssessmentDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;

                case "RefundAlreadyReceived":
                    <div class="col-md-6">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.RefundAlreadyReceived
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.RefundAlreadyReceived)
                        , new { @class = "numericOnly" })
                    </div>
                    <div class="input-group date form_datetime HLV_clacInput col-md-6"
                         data-date="" data-date-format="dd M yyyy"
                         data-link-field="ITReturnDetailsObject_RefundAlreadyReceivedDate"
                         data-link-format="dd M yyyy">
                        @Html.TextBoxFor(m => m.ITReturnDetailsObject.RefundAlreadyReceivedDate
                        , Model.ITReturnDetailsObject.RefundAlreadyReceivedDate.HasValue
                        ? Model.ITReturnDetailsObject.RefundAlreadyReceivedDate.Value.ToString("dd MMM yyyy")
                        : string.Empty
                        , new
                        {
                            @class = "form-control",
                            @size = "16",
                            @value = ""
                        })
                        <span class="input-group-addon">
                            &nbsp;&nbsp;<i class="fa fa-calendar fa-2x" aria-hidden="true">
                            </i>
                        </span>
                    </div>
                    break;
                default:
                    break;
            }

            @if (Model.ITReturnDetailsObject.Id > 0
                && Model.ITHeadMasterList[Model.ITHead].CanAddDocuments)
            {
                <div class="col-md-6">
                    <a href="#myModal_0" role="button" class="btn" data-toggle="modal">
                        <img src="~/images/upload.png"
                             class="imgITHeadDocumentsUploader"
                             title="click to upload the documents"
                             style="width:20px;height:20px;" />
                    </a>
                </div>
            }

            @if (!Model.ITReturnDetailsObject.IsReturn
                && Model.ITReturnDetailsObject.Id > 0
                && @Model.ITHeadMasterList[Model.ITHead].CanAddSubHead)
            {
                <div class="col-md-6">
                    @Html.Partial("_ITReturnExtensionList"
                    , Model.ITReturnExtensionListModels[Model.ITHead])
                </div>
            }
            </div>
    </td>
</tr>

@if (Model.ITHead == "IncomeFromOtherSources")
{
    <tr class="expand table-info">
        <td class="expandCollapse" style="font-weight:bold;font-size:large;">+</td>
        <td colspan="3" style="text-align:Left;font-weight:bold;font-size:large;">
            A) Tax on Regular Income
        </td>
    </tr>
    <tr>
        <td></td>
        <td>1</td>
        <td>
            Tax on Total Income
        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.RITotalIncome
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.RITotalIncome)
                        , new { @class = "numericOnly" })
                </div>
            </div>
        </td>
    </tr>
    <tr>
        <td></td>
        <td>2</td>
        <td>
            Surcharge
        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.RISurcharge
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.RISurcharge)
                        , new { @class = "numericOnly" })
                </div>
            </div>
        </td>
    </tr>
    <tr class="collapse">
        <td></td>
        <td>3</td>
        <td>
            Education Cess
        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.RIEducationCess
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.RIEducationCess)
                        , new { @class = "numericOnly" })
                </div>
            </div>
        </td>
    </tr>
}

@if (Model.ITHead == "ProfitUS115JB")
{
    <tr class="expand table-info">
        <td class="expandCollapse" style="font-weight:bold;font-size:large;">+</td>
        <td colspan="3" style="text-align:Left;font-weight:bold;font-size:large;">
            B) Tax on income computed under MAT provisions
        </td>
    </tr>

    <tr>
        <td></td>
        <td>1</td>
        <td>
            Tax on Total Income
        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATTotalIncome
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.MATTotalIncome)
                        , new { @class = "numericOnly" })
                </div>
            </div>
        </td>
    </tr>
    <tr>
        <td></td>
        <td>2</td>
        <td>
            Surcharge
        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATSurcharge
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.MATSurcharge)
                        , new { @class = "numericOnly" })
                </div>
            </div>
        </td>
    </tr>
    <tr class="collapse">
        <td></td>
        <td>3</td>
        <td>
            Education Cess
        </td>
        <td>
            <div class="row col-12">
                <div class="col-md-6">
                    @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATEducationCess
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.MATEducationCess)
                        , new { @class = "numericOnly" })
                </div>
            </div>
        </td>
    </tr>
}