@using LSWebApp.Models;
@using LS.Models;
@model  LSWebApp.Models.ITReturnDetailsModel

<h3>Original Return/Revised Return/Assessment Order</h3>

@using (Html.BeginForm("InsertorUpdateITReturnDetails", "TaxReturn"))
{
    @Html.AntiForgeryToken()

    <table class="table table-hover">
        <thead>
            <tr>
                <th colspan="2">Company Name</th>
                <th>Financial Year</th>
                @*<th>Assessment Year</th>*@
            </tr>
        </thead>
        <tbody>
            <tr class="table-active">
                <td colspan="2">
                    @Model.ITReturnDetailsObject.CompanyName
                    @Html.HiddenFor(m => m.ITReturnDetailsObject.CompanyID)
                    @Html.HiddenFor(m => m.ITReturnDetailsObject.CompanyName)
                </td>
                <td>
                    @Html.DropDownListFor(m => m.ITReturnDetailsObject.FYAYID, new SelectList(Model.FYAYList, "ID", "FinancialYear"))
                </td>
                @*<td>
                    @Html.LabelFor(m => m.ITReturnDetailsObject.AssessmentYear)
                </td>*@
            </tr>
        </tbody>
     </table>
     <br />
     <table class="table table-hover tblITRetDetails">
         <thead>
             <tr>
                 <th colspan="2">SNo.</th>
                 <th>Questions</th>
                 <th>Response</th>
             </tr>
         </thead>
         <tbody>
             <tr>
                 <td>2</td>
                 <td></td>
                 <td>The information is being updated for:-</td>
                 <td>
                     @Html.Partial("_LitigationDD", Model.ITSectionListSource)
                     @Html.HiddenFor(m=>m.ITReturnDetailsObject.Id, Model.ITReturnDetailsObject.Id)
                 </td>
             </tr>
             <tr>
                 <td>3</td>
                 <td></td>
                 <td>Date of filing the return:-</td>
                 <td>
                     <div class="input-group date form_datetime HLV_clacInput"
                          data-date="" data-date-format="dd M yyyy" data-link-field="ITReturnDetailsObject_ITReturnFillingDate"
                          data-link-format="dd/M/yyyy">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ITReturnFillingDate
                                     , Model.ITReturnDetailsObject.ITReturnFillingDate.HasValue ? Model.ITReturnDetailsObject.ITReturnFillingDate.Value.ToShortDateString() : string.Empty
                                     , new
                                     {
                                         @class = "form-control",
                                         @size = "16",
                                         @value = ""
                                     })
                         <span class="input-group-addon">
                             &nbsp;&nbsp;<i class="fa fa-calendar fa-3x" aria-hidden="true">
                             </i>
                         </span>
                     </div>

                 </td>
             </tr>
             <tr>
                 <td></td>
                 <td>a</td>
                 <td>Due date of filing the return:-</td>
                 <td>
                     <div class="input-group date form_datetime HLV_clacInput"
                          data-date="" data-date-format="dd M yyyy" data-link-field="ITReturnDetailsObject_ITReturnDueDate"
                          data-link-format="dd/M/yyyy">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ITReturnDueDate
                                     , Model.ITReturnDetailsObject.ITReturnDueDate.HasValue ? Model.ITReturnDetailsObject.ITReturnDueDate.Value.ToShortDateString() : string.Empty
                                     , new
                                     {
                                         @class = "form-control",
                                         @size = "16",
                                         @value = ""
                                     })
                         <span class="input-group-addon">
                             &nbsp;&nbsp;<i class="fa fa-calendar fa-3x" aria-hidden="true">
                             </i>
                         </span>
                     </div>
                 </td>
             </tr>


             <tr>
                 <td>4</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["HousePropIncome"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.HousePropIncome
                        , string.Format("{0:d}", Model.ITReturnDetailsObject.HousePropIncome)
                        , new { @class = "form-control form-control-sm numericOnly" })
                 </td>
             </tr>
             @if (!Model.ITReturnDetailsObject.IsReturn)
             {
                @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
                 .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["HousePropIncome"].Id)
                 .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["HousePropIncome"].Id))
             }
            

             <tr>
                 <td>5</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsNonSTT"].Description:-</td>
                 <td>@Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsNonSTT
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.IncomefromCapGainsNonSTT)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
            @if (!Model.ITReturnDetailsObject.IsReturn)
            {
                @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
                .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["IncomefromCapGainsNonSTT"].Id)
                .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["IncomefromCapGainsNonSTT"].Id))
            }
             <tr>
                 <td></td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsSTT"].Description:-</td>
                 <td>@Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsSTT
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.IncomefromCapGainsSTT)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td>6</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromBusinessProf"].Description:-</td>
                 <td>
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.IncomefromBusinessProf, !Model.ITReturnDetailsObject.IncomefromBusinessProf) Yes
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.IncomefromBusinessProf, Model.ITReturnDetailsObject.IncomefromBusinessProf) No
                 </td>
             </tr>
            @if (!Model.ITReturnDetailsObject.IsReturn)
            {
                @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
                     .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["IncomefromBusinessProf"].Id)
                     .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["IncomefromBusinessProf"].Id))
            }
             <tr>
                 <td></td>
                 <td>a</td>
                 <td>@Model.ITHeadMasterList["UnabsorbedDepreciation"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.UnabsorbedDepreciation
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.UnabsorbedDepreciation)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td></td>
                 <td>b</td>
                 <td>@Model.ITHeadMasterList["Broughtforwardlosses"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.Broughtforwardlosses
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.Broughtforwardlosses)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td>7</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomeFromOtherSources"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomeFromOtherSources
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.IncomeFromOtherSources)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
            @if (!Model.ITReturnDetailsObject.IsReturn)
            {
                @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
                     .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["IncomeFromOtherSources"].Id)
                     .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["IncomeFromOtherSources"].Id))
            }
             <tr>
                 <td>9</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["DeductChapterVIA"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.DeductChapterVIA
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.DeductChapterVIA)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             @if (!Model.ITReturnDetailsObject.IsReturn)
             {
                @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
                   .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["DeductChapterVIA"].Id)
                   .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["DeductChapterVIA"].Id))
             }
             <tr>
                 <td>11</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["ProfitUS115JB"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.ProfitUS115JB
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.ProfitUS115JB)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             @if (!Model.ITReturnDetailsObject.IsReturn)
             {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
                  .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["ProfitUS115JB"].Id)
                  .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["ProfitUS115JB"].Id))
             }
             <tr>
                 <td>22</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax1installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax1installment
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.AdvanceTax1installment)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>23</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax2installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax2installment
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.AdvanceTax2installment)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>24</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax3installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax3installment
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.AdvanceTax3installment)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>25</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax4installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax4installment
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.AdvanceTax4installment)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>27</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDS"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.TDS)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>28</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TCSPaidbyCompany"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.TCSPaidbyCompany
                     , string.Format("{0:d}", Model.ITReturnDetailsObject.TCSPaidbyCompany)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>36</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["SelfAssessmentTax"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.SelfAssessmentTax
                     , string.Format("{0:d}", Model.ITReturnDetailsObject.SelfAssessmentTax)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["MATCredit"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATCredit
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.MATCredit)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234A"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234A
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.InterestUS234A)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234B"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234B
                     , string.Format("{0:d}", Model.ITReturnDetailsObject.InterestUS234B)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234C"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234C
                     , string.Format("{0:d}", Model.ITReturnDetailsObject.InterestUS234C)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>38</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["InterestUS244A"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS244A
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.InterestUS244A)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>39</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["RefundReceived"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.RefundReceived
                    , string.Format("{0:d}", Model.ITReturnDetailsObject.RefundReceived)
                    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>41</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["RevisedReturnFile"].Description:-</td>
                 <td>
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.RevisedReturnFile, !Model.ITReturnDetailsObject.RevisedReturnFile) Yes
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.RevisedReturnFile, Model.ITReturnDetailsObject.RevisedReturnFile) No
                 </td>
             </tr>
             <tr>
                 <td colspan="4" align="center"><button type="submit" class="btn btn-primary">Save</button></td>
             </tr>
         </tbody>
     </table>
    <br />

}

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            $('.form_datetime').datetimepicker({
                weekStart: 1,
                todayBtn: 1,
                autoclose: 1,
                todayHighlight: 1,
                startView: 2,
                minView: 2,
                forceParse: 0
            });

            $(".numericOnly").keypress(function (e) {
                return isANumber(e);
            });
            $(".numericOnly").change(function (e) {
                if ($.isNumeric($(this).val())) {
                    $(this).val(parseFloat($(this).val()).toFixed(0));
                }
                else {
                    $(this).val("0");
                }
            });
        });

        function isANumber(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode
            if (charCode == 45 || charCode == 46 || (charCode >= 48 && charCode <= 57))
                return true;
            return false;
        }

        $(".ddFYAY").change(function () {
            $("#FinancialYear").val($(this).find("option:selected").text());
            loadComplianceDocuments();
        });
    </script>
}