@using LSWebApp.Models;
@using LS.Models;
@model  LSWebApp.Models.ITReturnDetailsModel

<h3>Original Return/Revised Return/Assessment Order</h3>

@using (Html.BeginForm("InsertorUpdateITReturnDetails", "TaxReturn"))
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th colspan="2">Company Name</th>
                <th>Financial Year</th>
                <th>Assesment Year</th>
            </tr>
        </thead>
        <tbody>
            <tr class="table-active">
                <td colspan="2">
                    @Model.ITReturnDetailsObject.CompanyName

                    @Html.HiddenFor(m => m.ITReturnDetailsObject.Id, Model.ITReturnDetailsObject.Id)
                    @Html.HiddenFor(m => m.ITReturnDetailsObject.CompanyID)
                    @Html.HiddenFor(m => m.ITReturnDetailsObject.CompanyName)
                    @*This is to fix/hook the wierd bug of missing the <form> 
                    tag for first instance of file upload popup*@                    
                    @Html.Partial("_ITHeadDocumentsUploader"
                                , new ITHeadDocumentsUploaderModel( 
                                    new List<ITReturnDocumentsDisplay>()
                                    , new ITHeadMaster()
                                    , new ITReturnDetails()
                                 )
                    )
                </td>
                <td>
                    <select id="ITReturnDetailsObject_FYAYID" name="@Html.NameFor(m=>m.ITReturnDetailsObject.FYAYID)">
                        @foreach (var item in Model.FYAYList)
                        {
                            <option value="@item.Id.ToString()" 
                                    data-year="@item.AssessmentYear">
                                @item.FinancialYear
                            </option>
                        }
                    </select>
                </td>
                <td class="tdAssessmentYear"></td>
            </tr>
        </tbody>
     </table>
     <br />
     <table class="table table-hover tblITRetDetails">
         <thead>
             <tr>
                 <th colspan="2">SNo.</th>
                 <th>Questions</th>
                 <th>Response</th>
             </tr>
         </thead>
         <tbody>
             <tr>
                 <td>1</td>
                 <td></td>
                 <td>The information is being updated for:-</td>
                 <td>
                     @Html.DropDownListFor(m => m.ITReturnDetailsObject.ITSectionCategoryID
                        , Model.ITSectionCategorySelectItems, new { @class = "ddITSectionCategory" })                    
                 </td>
             </tr>
             <tr>
                 <td>2</td>
                 <td></td>
                 <td>Section number:-</td>
                 <td>
                     @Html.Partial("_LitigationDD", Model.ITSectionListSource)
                 </td>
             </tr>
             <tr>
                 <td>3</td>
                 <td></td>
                 <td>Date of filing the return:-</td>
                 <td>
                     <div class="input-group date form_datetime HLV_clacInput"
                          data-date="" data-date-format="dd M yyyy" data-link-field="ITReturnDetailsObject_ITReturnFillingDate"
                          data-link-format="dd/M/yyyy">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ITReturnFillingDate
                             , Model.ITReturnDetailsObject.ITReturnFillingDate.HasValue 
                                ? Model.ITReturnDetailsObject.ITReturnFillingDate.Value.ToShortDateString() 
                                : string.Empty
                             , new
                             {
                                 @class = "form-control",
                                 @size = "16",
                                 @value = ""
                             })
                         <span class="input-group-addon">
                             &nbsp;&nbsp;<i class="fa fa-calendar fa-3x" aria-hidden="true">
                             </i>
                         </span>
                     </div>

                 </td>
             </tr>
             <tr>
                 <td>4</td>
                 <td></td>
                 <td>Due date of filing the return:-</td>
                 <td>
                     <div class="input-group date form_datetime HLV_clacInput"
                          data-date="" data-date-format="dd M yyyy" data-link-field="ITReturnDetailsObject_ITReturnDueDate"
                          data-link-format="dd/M/yyyy">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ITReturnDueDate
                         , Model.ITReturnDetailsObject.ITReturnDueDate.HasValue 
                            ? Model.ITReturnDetailsObject.ITReturnDueDate.Value.ToShortDateString() 
                            : string.Empty
                         , new
                         {
                             @class = "form-control",
                             @size = "16",
                             @value = ""
                         })
                         <span class="input-group-addon">
                             &nbsp;&nbsp;<i class="fa fa-calendar fa-3x" aria-hidden="true">
                             </i>
                         </span>
                     </div>
                 </td>
             </tr>

             <tr>
                 <td>@Model.ITHeadMasterList["IncomefromSalary"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromSalary"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSalary
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromSalary)
                            , new { @class = "form-control form-control-sm numericOnly" })

                         @if (Model.ITReturnDetailsObject.Id >0
                             && Model.ITHeadMasterList["IncomefromSalary"].CanAddDocuments)
                         {
                             @Html.Partial("_ITHeadDocumentsUploader"
                                ,Model.ITHeadDocumentsUploaderModels["IncomefromSalary"])
                         }
                    </div>
                 </td>
             </tr>

             <tr>
                 <td>@Model.ITHeadMasterList["HousePropIncome"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["HousePropIncome"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.HousePropIncome
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.HousePropIncome)
                            , new { @class = "form-control form-control-sm numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["HousePropIncome"].CanAddDocuments)
                         {
                             @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["HousePropIncome"])
                         }
                     </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsLTCG"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsLTCG"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsLTCG
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromCapGainsLTCG)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["IncomefromCapGainsLTCG"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["IncomefromCapGainsLTCG"])
                         }
                     </div>
                 </td>
             </tr>
             
             <tr>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsSTCG"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsSTCG"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsSTCG
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromCapGainsSTCG)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["IncomefromCapGainsSTCG"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["IncomefromCapGainsSTCG"])
                         }
                     </div>
                 </td>
             </tr>

             <tr>
                 <td>@Model.ITHeadMasterList["IncomefromBusinessProf"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromBusinessProf"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromBusinessProf
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromBusinessProf)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["IncomefromBusinessProf"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["IncomefromBusinessProf"])
                         }
                     </div>
                 </td>
             </tr>
            
             <tr>
                 <td>@Model.ITHeadMasterList["IncomefromSpeculativeBusiness"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromSpeculativeBusiness"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSpeculativeBusiness
                        , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromSpeculativeBusiness)
                        , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["IncomefromSpeculativeBusiness"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["IncomefromSpeculativeBusiness"])
                         }
                    </div>
                 </td>
             </tr>

             <tr>
                 <td>@Model.ITHeadMasterList["IncomeFromOtherSources"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomeFromOtherSources"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomeFromOtherSources
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomeFromOtherSources)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["IncomeFromOtherSources"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["IncomeFromOtherSources"])
                         }
                     </div>
                 </td>
             </tr>
             
             <tr>
                 <td>@Model.ITHeadMasterList["Broughtforwardlosses"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["Broughtforwardlosses"].Description:-</td>
                 <td>
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.Broughtforwardlosses, !Model.ITReturnDetailsObject.Broughtforwardlosses) Yes
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.Broughtforwardlosses, Model.ITReturnDetailsObject.Broughtforwardlosses) No
                 </td>
             </tr>

             <tr>
                 <td>@Model.ITHeadMasterList["DeductChapterVIA"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["DeductChapterVIA"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.DeductChapterVIA
                         , string.Format("{0:f}", Model.ITReturnDetailsObject.DeductChapterVIA)
                         , new { @class = "numericOnly" })

                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["DeductChapterVIA"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["DeductChapterVIA"])
                         }
                    </div>
                </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["ProfitUS115JB"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["ProfitUS115JB"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ProfitUS115JB
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.ProfitUS115JB)
                            , new { @class = "numericOnly" })

                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["ProfitUS115JB"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["ProfitUS115JB"])
                         }
                     </div>
                 </td>
             </tr>
            
             <tr>
                 <td>@Model.ITHeadMasterList["AdvanceTax1installment"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax1installment"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax1installment
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax1installment)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["AdvanceTax1installment"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["AdvanceTax1installment"])
                         }
                     </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["AdvanceTax2installment"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax2installment"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax2installment
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax2installment)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["AdvanceTax2installment"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["AdvanceTax2installment"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["AdvanceTax3installment"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax3installment"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax3installment
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax3installment)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["AdvanceTax3installment"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["AdvanceTax3installment"])
                         }
                     </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["AdvanceTax4installment"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax4installment"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax4installment
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax4installment)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["AdvanceTax4installment"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["AdvanceTax4installment"])
                         }
                     </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["TDS"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDS"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.TDS)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["TDS"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["TDS"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["TDS26AS"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDS26AS"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS26AS
                             , string.Format("{0:f}", Model.ITReturnDetailsObject.TDS26AS)
                             , new { @class = "numericOnly" })

                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["TDS26AS"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["TDS26AS"])
                         }
                     </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["TDSasperBooks"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDSasperBooks"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDSasperBooks
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.TDSasperBooks)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["TDSasperBooks"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["TDSasperBooks"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["TCSPaidbyCompany"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TCSPaidbyCompany"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.TCSPaidbyCompany
                         , string.Format("{0:f}", Model.ITReturnDetailsObject.TCSPaidbyCompany)
                        , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["TCSPaidbyCompany"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["TCSPaidbyCompany"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td>@Model.ITHeadMasterList["SelfAssessmentTax"].ExcelSrNo</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["SelfAssessmentTax"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.SelfAssessmentTax
                         , string.Format("{0:f}", Model.ITReturnDetailsObject.SelfAssessmentTax)
                        , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["SelfAssessmentTax"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["SelfAssessmentTax"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["MATCredit"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATCredit
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.MATCredit)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["MATCredit"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["MATCredit"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234A"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234A
                            , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234A)
                            , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["InterestUS234A"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["InterestUS234A"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234B"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234B
                         , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234B)
                        , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["InterestUS234B"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["InterestUS234B"])
                         }
                    </div>
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234C"].Description:-</td>
                 <td>
                     <div class="row col-12">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234C
                         , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234C)
                        , new { @class = "numericOnly" })
                         @if (Model.ITReturnDetailsObject.Id > 0
                             && Model.ITHeadMasterList["InterestUS234C"].CanAddDocuments)
                         {
                            @Html.Partial("_ITHeadDocumentsUploader"
                                , Model.ITHeadDocumentsUploaderModels["InterestUS234C"])
                         }
                    </div>
                 </td>
             </tr>
             
             <tr>
                 <td colspan="4" align="center"><button type="submit" class="btn btn-primary">Save</button></td>
             </tr>
         </tbody>
     </table>
    <br />

}

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {

            $("#ITReturnDetailsObject_FYAYID").change(function () {
                loadAssessmentYear();
            });
            loadAssessmentYear();

            $('.form_datetime').datetimepicker({
                weekStart: 1,
                todayBtn: 1,
                autoclose: 1,
                todayHighlight: 1,
                startView: 2,
                minView: 2,
                forceParse: 0
            });

            $(".numericOnly").keypress(function (e) {
                return isANumber(e);
            });
            $(".numericOnly").change(function (e) {
                if ($.isNumeric($(this).val())) {
                    $(this).val(parseFloat($(this).val()).toFixed(2));
                }
                else {
                    $(this).val("0.00");
                }
            });
        });

        function deleteITReturnDetailsDocument(itReturnDocumentId, filePath) {
            $.ajax({
                url: '/deletetITReturnDocument?Id=' + itReturnDocumentId + '&FilePath=' + filePath,
                error: function () {
                },
                dataType: 'json',
                success: function (data) {
                    window.location.reload();
                },
                type: 'POST'
            });
            return false;
        }

        function loadAssessmentYear() {
            $(".tdAssessmentYear").html($("#ITReturnDetailsObject_FYAYID").find(':selected').data('year'));
        }

        function isANumber(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode
            if (charCode == 45 || charCode == 46 || (charCode >= 48 && charCode <= 57))
                return true;
            return false;
        }

        $(".ddFYAY").change(function () {
            $("#FinancialYear").val($(this).find("option:selected").text());
            loadComplianceDocuments();
        });

        $(".ddITSectionCategory").change(function () {
            var valll = $(this).find("option:selected").val();
            $.ajax({
                url: '/getITSections?categoryId=' + $(this).find("option:selected").val(),
                error: function () {
                },
                dataType: 'json',
                success: function (data) {
                    //debugger;
                    $('.ddLitigationDD').html('');
                    $(data).each(function () {
                        var option = $('<option />');
                        option.attr('value', this.Id).html(this.Description);
//                        debugger;
                        $('.ddLitigationDD').append(option);
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown)
                {
                    debugger;
                },
                type: 'GET'
            });
        });

    </script>
}