@using LSWebApp.Models;
@using LS.Models;
@model  LSWebApp.Models.ITReturnDetailsModel

<h3>Original Return/Revised Return/Assessment Order</h3>

@using (Html.BeginForm("InsertorUpdateITReturnDetails", "TaxReturn"))
{
    @Html.AntiForgeryToken()

    <table class="table table-hover">
        <thead>
            <tr>
                <th colspan="2">Company Name</th>
                <th>Financial Year</th>                
            </tr>
        </thead>
        <tbody>
            <tr class="table-active">
                <td colspan="2">
                    @Model.ITReturnDetailsObject.CompanyName

                    @Html.HiddenFor(m => m.ITReturnDetailsObject.Id, Model.ITReturnDetailsObject.Id)
                    @Html.HiddenFor(m => m.ITReturnDetailsObject.CompanyID)
                    @Html.HiddenFor(m => m.ITReturnDetailsObject.CompanyName)
                </td>
                <td>
                    @Html.DropDownListFor(m => m.ITReturnDetailsObject.FYAYID, new SelectList(Model.FYAYList, "ID", "FinancialYear"))
                </td>
            </tr>
        </tbody>
     </table>
     <br />
     <table class="table table-hover tblITRetDetails">
         <thead>
             <tr>
                 <th colspan="2">SNo.</th>
                 <th>Questions</th>
                 <th>Response</th>
             </tr>
         </thead>
         <tbody>
             <tr>
                 <td>1</td>
                 <td></td>
                 <td>The information is being updated for:-</td>
                 <td>
                     @Html.DropDownListFor(m => m.ITReturnDetailsObject.ITSectionCategoryID, new SelectList(Model.ITSectionCategoryList, "Id", "Description"), new { @class = "ddITSectionCategory" })
                 </td>
             </tr>
             <tr>
                 <td>2</td>
                 <td></td>
                 <td>Section number:-</td>
                 <td>
                     @Html.Partial("_LitigationDD", Model.ITSectionListSource)
                 </td>
             </tr>
             <tr>
                 <td>3</td>
                 <td></td>
                 <td>Date of filing the return:-</td>
                 <td>
                     <div class="input-group date form_datetime HLV_clacInput"
                          data-date="" data-date-format="dd M yyyy" data-link-field="ITReturnDetailsObject_ITReturnFillingDate"
                          data-link-format="dd/M/yyyy">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ITReturnFillingDate
                 , Model.ITReturnDetailsObject.ITReturnFillingDate.HasValue ? Model.ITReturnDetailsObject.ITReturnFillingDate.Value.ToShortDateString() : string.Empty
                 , new
                 {
                     @class = "form-control",
                     @size = "16",
                     @value = ""
                 })
                         <span class="input-group-addon">
                             &nbsp;&nbsp;<i class="fa fa-calendar fa-3x" aria-hidden="true">
                             </i>
                         </span>
                     </div>

                 </td>
             </tr>
             <tr>
                 <td>4</td>
                 <td></td>
                 <td>Due date of filing the return:-</td>
                 <td>
                     <div class="input-group date form_datetime HLV_clacInput"
                          data-date="" data-date-format="dd M yyyy" data-link-field="ITReturnDetailsObject_ITReturnDueDate"
                          data-link-format="dd/M/yyyy">
                         @Html.TextBoxFor(m => m.ITReturnDetailsObject.ITReturnDueDate
                 , Model.ITReturnDetailsObject.ITReturnDueDate.HasValue ? Model.ITReturnDetailsObject.ITReturnDueDate.Value.ToShortDateString() : string.Empty
                 , new
                 {
                     @class = "form-control",
                     @size = "16",
                     @value = ""
                 })
                         <span class="input-group-addon">
                             &nbsp;&nbsp;<i class="fa fa-calendar fa-3x" aria-hidden="true">
                             </i>
                         </span>
                     </div>
                 </td>
             </tr>

             <tr>
                 <td>5</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromSalary"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSalary
    , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromSalary)
    , new { @class = "form-control form-control-sm numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td>6</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["HousePropIncome"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.HousePropIncome
    , string.Format("{0:f}", Model.ITReturnDetailsObject.HousePropIncome)
    , new { @class = "form-control form-control-sm numericOnly" })
                 </td>
             </tr>
             @*@if (!Model.ITReturnDetailsObject.IsReturn)
            {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
              .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["HousePropIncome"].Id)
              .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["HousePropIncome"].Id))
        }*@


             <tr>
                 <td>7</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsLTCG"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsLTCG
, string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromCapGainsLTCG)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             @*@if (!Model.ITReturnDetailsObject.IsReturn)
            {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
         .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["IncomefromCapGainsNonSTT"].Id)
         .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["IncomefromCapGainsNonSTT"].Id))
        }*@
             <tr>
                 <td>8</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromCapGainsSTCG"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromCapGainsSTCG
            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromCapGainsSTCG)
            , new { @class = "numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td>9</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromBusinessProf"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromBusinessProf
            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromBusinessProf)
            , new { @class = "numericOnly" })
                 </td>
             </tr>
             @*@if (!Model.ITReturnDetailsObject.IsReturn)
            {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
              .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["IncomefromBusinessProf"].Id)
              .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["IncomefromBusinessProf"].Id))
        }*@
             <tr>
                 <td>10</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomefromSpeculativeBusiness"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomefromSpeculativeBusiness
            , string.Format("{0:f}", Model.ITReturnDetailsObject.IncomefromSpeculativeBusiness)
            , new { @class = "numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td>11</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["IncomeFromOtherSources"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.IncomeFromOtherSources
, string.Format("{0:f}", Model.ITReturnDetailsObject.IncomeFromOtherSources)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             @*@if (!Model.ITReturnDetailsObject.IsReturn)
            {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
          .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["IncomeFromOtherSources"].Id)
          .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["IncomeFromOtherSources"].Id))
        }*@
             <tr>
                 <td>12</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["Broughtforwardlosses"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.Broughtforwardlosses
, string.Format("{0:f}", Model.ITReturnDetailsObject.Broughtforwardlosses)
, new { @class = "numericOnly" })
                 </td>
             </tr>

             <tr>
                 <td>13</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["DeductChapterVIA"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.DeductChapterVIA
, string.Format("{0:f}", Model.ITReturnDetailsObject.DeductChapterVIA)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             @*@if (!Model.ITReturnDetailsObject.IsReturn)
            {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
        .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["DeductChapterVIA"].Id)
        .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["DeductChapterVIA"].Id))
        }*@
             <tr>
                 <td>14</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["ProfitUS115JB"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.ProfitUS115JB
, string.Format("{0:f}", Model.ITReturnDetailsObject.ProfitUS115JB)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             @*@if (!Model.ITReturnDetailsObject.IsReturn)
            {
                 @Html.Partial("ITSubHeadDetails", new ITReturnDetailsExtensionModel(Model.ExtensionList
        .Where(el => el.HeadMasterObject.Id == @Model.ITHeadMasterList["ProfitUS115JB"].Id)
        .ToList<ITReturnDetailsExtension>(), @Model.ITHeadMasterList["ProfitUS115JB"].Id))
        }*@
             <tr>
                 <td>15</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax1installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax1installment
, string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax1installment)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>16</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax2installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax2installment
, string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax2installment)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>17</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax3installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax3installment
, string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax3installment)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>18</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["AdvanceTax4installment"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.AdvanceTax4installment
, string.Format("{0:f}", Model.ITReturnDetailsObject.AdvanceTax4installment)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>19</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDS"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS
, string.Format("{0:f}", Model.ITReturnDetailsObject.TDS)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>20</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDS26AS"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDS26AS
, string.Format("{0:f}", Model.ITReturnDetailsObject.TDS26AS)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>21</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TDSasperBooks"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.TDSasperBooks
    , string.Format("{0:f}", Model.ITReturnDetailsObject.TDSasperBooks)
    , new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>22</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["TCSPaidbyCompany"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.TCSPaidbyCompany
 , string.Format("{0:f}", Model.ITReturnDetailsObject.TCSPaidbyCompany)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>23</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["SelfAssessmentTax"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.SelfAssessmentTax
 , string.Format("{0:f}", Model.ITReturnDetailsObject.SelfAssessmentTax)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["MATCredit"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.MATCredit
, string.Format("{0:f}", Model.ITReturnDetailsObject.MATCredit)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234A"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234A
, string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234A)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234B"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234B
 , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234B)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td colspan="2"></td>
                 <td>@Model.ITHeadMasterList["InterestUS234C"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS234C
 , string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS234C)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             @*<tr>
                 <td>38</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["InterestUS244A"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.InterestUS244A
, string.Format("{0:f}", Model.ITReturnDetailsObject.InterestUS244A)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>39</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["RefundReceived"].Description:-</td>
                 <td>
                     @Html.TextBoxFor(m => m.ITReturnDetailsObject.RefundReceived
, string.Format("{0:f}", Model.ITReturnDetailsObject.RefundReceived)
, new { @class = "numericOnly" })
                 </td>
             </tr>
             <tr>
                 <td>41</td>
                 <td></td>
                 <td>@Model.ITHeadMasterList["RevisedReturnFile"].Description:-</td>
                 <td>
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.RevisedReturnFile, !Model.ITReturnDetailsObject.RevisedReturnFile) Yes
                     @Html.RadioButtonFor(m => m.ITReturnDetailsObject.RevisedReturnFile, Model.ITReturnDetailsObject.RevisedReturnFile) No
                 </td>
             </tr>*@
             <tr>
                 <td colspan="4" align="center"><button type="submit" class="btn btn-primary">Save</button></td>
             </tr>
         </tbody>
     </table>
    <br />

}

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            $('.form_datetime').datetimepicker({
                weekStart: 1,
                todayBtn: 1,
                autoclose: 1,
                todayHighlight: 1,
                startView: 2,
                minView: 2,
                forceParse: 0
            });

            $(".numericOnly").keypress(function (e) {
                return isANumber(e);
            });
            $(".numericOnly").change(function (e) {
                if ($.isNumeric($(this).val())) {
                    $(this).val(parseFloat($(this).val()).toFixed(2));
                }
                else {
                    $(this).val("0.00");
                }
            });
            $('.ddLitigationDD').html('');
        });

        function isANumber(evt) {
            var charCode = (evt.which) ? evt.which : evt.keyCode
            if (charCode == 45 || charCode == 46 || (charCode >= 48 && charCode <= 57))
                return true;
            return false;
        }

        $(".ddFYAY").change(function () {
            $("#FinancialYear").val($(this).find("option:selected").text());
            loadComplianceDocuments();
        });

        $(".ddITSectionCategory").change(function () {
            var valll = $(this).find("option:selected").val();
            $.ajax({
                url: '/getITSections?categoryId=' + $(this).find("option:selected").val(),
                error: function () {
                },
                dataType: 'json',
                success: function (data) {
                    //debugger;
                    $('.ddLitigationDD').html('');
                    $(data).each(function () {
                        var option = $('<option />');
                        option.attr('value', this.Id).html(this.Description);
//                        debugger;
                        $('.ddLitigationDD').append(option);
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown)
                {
                    debugger;
                },
                type: 'GET'
            });
        });

    </script>
}